package com.contrato.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.contrato.entidad.Expediente;

import com.contrato.interfaces.ExpedienteDAO;
import com.contrato.utils.MySqlConexion;


public class MySqlExpedienteDAO implements ExpedienteDAO {

	@Override
	public int save(Expediente bean) {
		int salida=-1;
		Connection cn=null;
		PreparedStatement pstm=null;
		try {
			//Generar la conexion
			cn=MySqlConexion.getConectar();
			//Utilizar sentencias 
			String sql="insert into tb_expediente values(null,?,?,?,?,?,?,?)";
			pstm=cn.prepareStatement(sql);
			//Accediendo a los campos
			pstm.setString(1,bean.getCodExpediente());
			pstm.setString(2, bean.getFechaExpe());
			pstm.setString(3, bean.getFechaSalida());
			pstm.setString(4, bean.getNomSecretria());
			pstm.setString(5, bean.getEstadoExpe());
			pstm.setString(6, bean.getCodOficio());
			pstm.setString(7, bean.getMens());

			salida=pstm.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		finally {
			try {
				if(pstm!=null) pstm.close();
				if(cn!=null) cn.close();
			} catch (SQLException e2) {
				e2.printStackTrace();
			}
		}
		return salida;
	}

	@Override
	public int update(Expediente bean) {
		int result=-1;
		Connection cn=null;
		PreparedStatement pstm=null;
		try {
			cn=MySqlConexion.getConectar();
			String sql="update tb_expediente set codigoExpediente=?, fechaExpe=?,fechaExpeSalida=?,nomSecretaria=?,estadoExpe=?, codOficio=? where codExpediente=?";
			
			pstm=cn.prepareStatement(sql);
			//Accediendo a los campos
			pstm.setInt(1, bean.getCodigoExpediente());
			pstm.setString(2, bean.getFechaExpe());
			pstm.setString(3, bean.getFechaSalida());
			pstm.setString(4, bean.getNomSecretria());
			pstm.setString(5, bean.getEstadoExpe());
			pstm.setString(6, bean.getCodOficio());
			pstm.setString(7, bean.getCodExpediente());
		
			result=pstm.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		finally {
			try {
				if(pstm!=null) pstm.close();
				if(cn!=null) cn.close();
			} catch (SQLException e2) {
				e2.printStackTrace();
			}
		}
		return result;
	}


	@Override
	public Expediente findById(String cod) {
		Expediente bean=null;
		Connection cn=null;
		PreparedStatement pstm=null;
		ResultSet rs=null;
		try {
	
			cn=MySqlConexion.getConectar();
			String sql="select *from tb_expediente where codExpediente=?";
			pstm=cn.prepareStatement(sql);
			pstm.setString(1, cod);
			rs=pstm.executeQuery();
			//Validamos si existe el registro de expediente
			if(rs.next()) {
				bean=new Expediente();
				bean.setCodigoExpediente(rs.getInt(1));
				bean.setCodExpediente(rs.getString(2));
				bean.setFechaExpe(rs.getString(3));
				bean.setFechaSalida(rs.getString(4));
				bean.setNomSecretria(rs.getString(5));
				bean.setEstadoExpe(rs.getString(6));
				bean.setCodOficio(rs.getString(7));
				
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		finally {
			try {
				if(rs!=null) rs.close();
				if(pstm!=null) pstm.close();
				if(cn!=null) cn.close();
			} catch (SQLException e2) {
				e2.printStackTrace();
			}
		}		
		return bean;
	}

	@Override
	public List<Expediente> listAll() {
		List<Expediente> listaExpe=new ArrayList<Expediente>();
		Expediente bean=null;
		Connection cn=null;
		PreparedStatement pstm=null;
		ResultSet rs=null;
		try {
			//Conexion y acceder a los datos
			cn=MySqlConexion.getConectar();
			String sql="select *from tb_expediente";
			pstm=cn.prepareStatement(sql);
			rs=pstm.executeQuery();
			
			while(rs.next()) {
				//Crear un objeto de expediente
				bean=new Expediente();
				bean.setCodigoExpediente(rs.getInt(1));
				bean.setCodExpediente(rs.getString(2));
				bean.setFechaExpe(rs.getString(3));
				bean.setFechaSalida(rs.getString(4));
				bean.setNomSecretria(rs.getString(5));
				bean.setEstadoExpe(rs.getString(6));
				bean.setCodOficio(rs.getString(7));
				
				listaExpe.add(bean);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		finally {
			try {
				if(rs!=null) rs.close();
				if(pstm!=null) pstm.close();
				if(cn!=null) cn.close();
			} catch (SQLException e2) {
				e2.printStackTrace();
			}
		}
		
		return listaExpe;
	}

	@Override
	public String generarCodigoExpe() {
		String numero="";
		Connection cn=null;
		PreparedStatement pstm=null;
		ResultSet rs=null;
		try {
			//1.
			cn=MySqlConexion.getConectar();
			//2.
			String sql="select concat('EX',	substring(concat('0000',cast(substring(max(codExpediente),3) as unsigned)+1),\r\n"
					+ "length(concat('0000',cast(substring(max(codExpediente),3) as unsigned)+1))-3)) numero\r\n"
					+ "					from tb_expediente" ;
			//3.
			pstm=cn.prepareStatement(sql);
			rs=pstm.executeQuery();
			//6.
			if(rs.next()) {
				numero=rs.getString(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		finally {
			try {
				if(rs!=null) rs.close();
				if(pstm!=null) pstm.close();
				if(cn!=null) cn.close();
			} catch (SQLException e2) {
				e2.printStackTrace();
			}
		}		
		
		return numero;
	}

	@Override
	public List<Expediente> listAllByEstado(String estado) {
		List<Expediente> lista=new ArrayList<Expediente>();
		Connection cn=null;
		PreparedStatement pstm=null;
		ResultSet rs=null;
		try {
			cn=MySqlConexion.getConectar();
			String sql=" select codigoExpediente , codExpediente,fechaExpe,fechaExpeSalida,nomSecretaria,estadoExpe,codOficio"
					+ "                    from tb_expediente  where estadoExpe=?";
			pstm=cn.prepareStatement(sql);
			pstm.setString(1, estado);
			rs=pstm.executeQuery();
			while(rs.next()) {
				Expediente expediente=new Expediente();
				expediente.setCodigoExpediente(rs.getInt(1));
				expediente.setCodExpediente(rs.getString(2));
				expediente.setFechaExpe(rs.getString(3));
				expediente.setFechaSalida(rs.getString(4));
				expediente.setNomSecretria(rs.getString(5));
				expediente.setEstadoExpe(rs.getString(6));
				expediente.setCodOficio(rs.getString(7));
			
				lista.add(expediente);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		finally {
			try {
				if(rs!=null) rs.close();
				if(pstm!=null) pstm.close();
				if(cn!=null) cn.close();
			} catch (SQLException e2) {
				e2.printStackTrace();
			}
		}
		
		return lista;
	}


}
