package com.contrato.controlador;

import java.io.IOException;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.contrato.entidad.Solicitante;

import com.contrato.services.SolicitanteService;

/**
 * Servlet implementation class ServletSolicitante
 */
@WebServlet("/ServletSolicitante")
public class ServletSolicitante extends HttpServlet {
	private static final long serialVersionUID = 1L;
	
	private SolicitanteService servicioSoli;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public ServletSolicitante() {
        super();
        servicioSoli=new SolicitanteService();
    }

	/**
	 * @see HttpServlet#service(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//ACCIONES
		String acciones;
		acciones=request.getParameter("tipo");
		if(acciones.equals("LISTAR")) {
			listarSolicitante(request,response);
		}
		else if(acciones.equals("REGISTRAR")) {
			registrarSolicitante(request,response);
		}
		else if(acciones.equals("ELIMINAR")) {
			eliminarSolicitante(request,response);
		}
		
	}

	private void eliminarSolicitante(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//leer caja con atributo name "codigoEliminar"
		String cod;
		cod=request.getParameter("codigoEliminar");
		//invocar al método delete y enviar la variable "cod"
		int salida;
		
		salida=servicioSoli.eliminarPorId(Integer.parseInt(cod));
				
		//validar
		if(salida>0) {
			request.setAttribute("MENSAJE", "El solicitante se eliminó");
			listarSolicitante(request, response);
		}
		else {
			request.setAttribute("MENSAJE", "Error en la eliminación del solicitante");
			listarSolicitante(request, response);
		}
		
	}

	private void registrarSolicitante(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//Creacion de variables y leer controles de solicitante.jsp
		String codigoSoli,nombreSoli,apellidosSoli,dniSoli,distritoSoli,direccionSoli,celularSoli,sexoSoli,areaSoli,fechaSoli,expeSoli;
	
		codigoSoli=request.getParameter("codSoli");
		nombreSoli=request.getParameter("nomSoli");
		apellidosSoli=request.getParameter("apeSoli");
		dniSoli=request.getParameter("dniSoli");
		distritoSoli=request.getParameter("disSoli");
		direccionSoli=request.getParameter("direSoli");
		celularSoli=request.getParameter("celSoli");
		sexoSoli=request.getParameter("sexo");
		areaSoli=request.getParameter("areSoli");
		fechaSoli=request.getParameter("fechSoli");
		expeSoli=request.getParameter("expeSoli");
		
		//Creacion de objeto
		Solicitante bean=new Solicitante();
		//Set, no va codigo
		bean.setNomSoli(nombreSoli);
		bean.setApeSoli(apellidosSoli);
		bean.setDniSoli(Integer.parseInt(dniSoli));
		bean.setDistrito(distritoSoli);
		bean.setDireccSoli(direccionSoli);
		bean.setCeluSoli(Integer.parseInt(celularSoli));
		bean.setSexo(sexoSoli);
		bean.setArea(areaSoli);
		bean.setFechaSoli(fechaSoli);
		bean.setExpe(expeSoli);

		if(Integer.parseInt(codigoSoli)==0) {
					
					int salida;
					salida=servicioSoli.registrar(bean);
					
					if(salida>0) {
						request.setAttribute("MENSAJE", "Solicitante registrado correctamente");
						listarSolicitante(request, response);
					}
					else {
						request.setAttribute("MENSAJE", "Error en el registro de docente");
						listarSolicitante(request, response);
					}
		}
		else {
					//setear atributo codigo
					bean.setCodSoli(Integer.parseInt(codigoSoli));
					//invocar al método update
					int salida;
					salida=servicioSoli.actualizar(bean);
					//validar
					if(salida>0) {
						request.setAttribute("MENSAJE", "Solicitante actualizado correctamente");
						listarSolicitante(request, response);
					}
					else {
						request.setAttribute("MENSAJE", "Error en la actualización");
						listarSolicitante(request, response);
					}
		}

	}

	private void listarSolicitante(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//Invocamos al método
		List<Solicitante> dataSoli=servicioSoli.listSolicitante();
		//listSolicitante almacenará el arreglo de objetos data
		request.setAttribute("liSolicitante",dataSoli);
		//Direccionar a solicitante.jsp
		request.getRequestDispatcher("/solicitante.jsp").forward(request, response);
		
	}

}
